{"name":"MockHttpHeaders","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["redstone/redstone_mocks.HttpHeaders"],"subclass":[],"variables":{},"inheritedVariables":{"chunkedTransferEncoding":{"name":"chunkedTransferEncoding","qualifiedName":"redstone/redstone_mocks.HttpHeaders.chunkedTransferEncoding","comment":"<p>Gets and sets the chunked transfer encoding header value.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"contentLength":{"name":"contentLength","qualifiedName":"redstone/redstone_mocks.HttpHeaders.contentLength","comment":"<p>Gets and sets the content length header value.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"contentType":{"name":"contentType","qualifiedName":"redstone/redstone_mocks.HttpHeaders.contentType","comment":"<p>Gets and sets the content type. Note that the content type in the\nheader will only be updated if this field is set\ndirectly. Mutating the returned current value will have no\neffect.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"annotations":[]},"date":{"name":"date","qualifiedName":"redstone/redstone_mocks.HttpHeaders.date","comment":"<p>Gets and sets the date. The value of this property will\nreflect the 'date' header.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"expires":{"name":"expires","qualifiedName":"redstone/redstone_mocks.HttpHeaders.expires","comment":"<p>Gets and sets the expiry date. The value of this property will\nreflect the 'expires' header.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"host":{"name":"host","qualifiedName":"redstone/redstone_mocks.HttpHeaders.host","comment":"<p>Gets and sets the host part of the 'host' header for the\nconnection.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"ifModifiedSince":{"name":"ifModifiedSince","qualifiedName":"redstone/redstone_mocks.HttpHeaders.ifModifiedSince","comment":"<p>Gets and sets the \"if-modified-since\" date. The value of this property will\nreflect the \"if-modified-since\" header.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"annotations":[]},"persistentConnection":{"name":"persistentConnection","qualifiedName":"redstone/redstone_mocks.HttpHeaders.persistentConnection","comment":"<p>Gets and sets the persistent connection header value.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"port":{"name":"port","qualifiedName":"redstone/redstone_mocks.HttpHeaders.port","comment":"<p>Gets and sets the port part of the 'host' header for the\nconnection.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{"contentType=":{"name":"contentType=","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.contentType=","comment":"","commentFrom":"redstone_mocks.MockHttpHeaders.contentType=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.ContentType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ifModifiedSince=":{"name":"ifModifiedSince=","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.ifModifiedSince=","comment":"","commentFrom":"redstone_mocks.MockHttpHeaders.ifModifiedSince=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"ifModifiedSince":{"name":"ifModifiedSince","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.DateTime","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"contentType":{"name":"contentType","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.contentType","comment":"","commentFrom":"redstone_mocks.MockHttpHeaders.contentType","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-io.ContentType","inner":[]}],"parameters":{},"annotations":[]},"ifModifiedSince":{"name":"ifModifiedSince","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.ifModifiedSince","comment":"","commentFrom":"redstone_mocks.MockHttpHeaders.ifModifiedSince","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.MockHttpHeaders-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"values":{"name":"values","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.[]","comment":"<p>Returns the list of values for the header named <a>redstone/redstone_mocks.MockHttpHeaders.[].name</a>. If there\nis no header with the provided name, <code>null</code> will be returned.</p>","commentFrom":"redstone_mocks.HttpHeaders.[]","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.add","comment":"<p>Adds a header value. The header named <a>redstone/redstone_mocks.MockHttpHeaders.add.name</a> will have the value\n<a>redstone/redstone_mocks.MockHttpHeaders.add.value</a> added to its list of values. Some headers are single\nvalued, and for these adding a value will replace the previous\nvalue. If the value is of type DateTime a HTTP date format will be\napplied. If the value is a <code>List</code> each element of the list will\nbe added separately. For all other types the default <code>toString</code>\nmethod will be used.</p>","commentFrom":"redstone_mocks.HttpHeaders.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.forEach","comment":"<p>Enumerates the headers, applying the function <a>redstone/redstone_mocks.MockHttpHeaders.forEach.f</a> to each\nheader. The header name passed in <code>name</code> will be all lower\ncase.</p>","commentFrom":"redstone_mocks.HttpHeaders.forEach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"values":{"name":"values","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.noSuchMethod","comment":"<p><a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"set":{"name":"set","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.set","comment":"<p>Sets a header. The header named <a>redstone/redstone_mocks.MockHttpHeaders.set.name</a> will have all its values\ncleared before the value <a>redstone/redstone_mocks.MockHttpHeaders.set.value</a> is added as its value.</p>","commentFrom":"redstone_mocks.HttpHeaders.set","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.value","comment":"<p>Convenience method for the value for a single valued header. If\nthere is no header with the provided name, <code>null</code> will be\nreturned. If the header has more than one value an exception is\nthrown.</p>","commentFrom":"redstone_mocks.HttpHeaders.value","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>redstone/redstone_mocks.MockHttpHeaders.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>redstone/redstone_mocks.MockHttpHeaders.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>redstone/redstone_mocks.MockHttpHeaders.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.[]","comment":"<p>Returns the list of values for the header named <a>redstone/redstone_mocks.MockHttpHeaders.[].name</a>. If there\nis no header with the provided name, <code>null</code> will be returned.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.[]","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.add","comment":"<p>Adds a header value. The header named <a>redstone/redstone_mocks.MockHttpHeaders.add.name</a> will have the value\n<a>redstone/redstone_mocks.MockHttpHeaders.add.value</a> added to its list of values. Some headers are single\nvalued, and for these adding a value will replace the previous\nvalue. If the value is of type DateTime a HTTP date format will be\napplied. If the value is a <code>List</code> each element of the list will\nbe added separately. For all other types the default <code>toString</code>\nmethod will be used.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.forEach","comment":"<p>Enumerates the headers, applying the function <a>redstone/redstone_mocks.MockHttpHeaders.forEach.f</a> to each\nheader. The header name passed in <code>name</code> will be all lower\ncase.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.forEach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"f":{"name":"f","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"values":{"name":"values","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}}}}},"annotations":[]},"noFolding":{"name":"noFolding","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.noFolding","comment":"<p>Disables folding for the header named <a>redstone/redstone_mocks.MockHttpHeaders.noFolding.name</a> when sending the HTTP\nheader. By default, multiple header values are folded into a\nsingle header line by separating the values with commas. The\n'set-cookie' header has folding disabled by default.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.noFolding","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.noSuchMethod","comment":"<p><a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_mocks.MockHttpHeaders.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.remove","comment":"<p>Removes a specific value for a header name. Some headers have\nsystem supplied values and for these the system supplied values\nwill still be added to the collection of values for the header.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.remove","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.removeAll","comment":"<p>Removes all values for the specified header name. Some headers\nhave system supplied values and for these the system supplied\nvalues will still be added to the collection of values for the\nheader.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.removeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"set":{"name":"set","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.set","comment":"<p>Sets a header. The header named <a>redstone/redstone_mocks.MockHttpHeaders.set.name</a> will have all its values\ncleared before the value <a>redstone/redstone_mocks.MockHttpHeaders.set.value</a> is added as its value.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.set","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"redstone/redstone_mocks.MockHttpHeaders.value","comment":"<p>Convenience method for the value for a single valued header. If\nthere is no header with the provided name, <code>null</code> will be\nreturned. If the header has more than one value an exception is\nthrown.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpHeaders.value","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}