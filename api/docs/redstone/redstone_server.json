{"name":"redstone_server","qualifiedName":"redstone/redstone_server","comment":"","variables":{"TEXT":{"name":"TEXT","qualifiedName":"redstone/redstone_server.TEXT","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"FORM":{"name":"FORM","qualifiedName":"redstone/redstone_server.FORM","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"JSON":{"name":"JSON","qualifiedName":"redstone/redstone_server.JSON","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"DELETE":{"name":"DELETE","qualifiedName":"redstone/redstone_server.DELETE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"PUT":{"name":"PUT","qualifiedName":"redstone/redstone_server.PUT","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"POST":{"name":"POST","qualifiedName":"redstone/redstone_server.POST","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"GET":{"name":"GET","qualifiedName":"redstone/redstone_server.GET","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{"chain":{"name":"chain","qualifiedName":"redstone/redstone_server.chain","comment":"<p>The request's chain.</p>\n<p>Since each request run in its own <a>redstone/dart-async.Zone</a>, it's completely safe\nto access this object at any time, even in async callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Chain","inner":[]}],"parameters":{},"annotations":[]},"request":{"name":"request","qualifiedName":"redstone/redstone_server.request","comment":"<p>The request's information and content.</p>\n<p>Since each request run in it's own <a>redstone/dart-async.Zone</a>, it's completely safe\nto access this object at any time, even in async callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Request","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"setupConsoleLog":{"name":"setupConsoleLog","qualifiedName":"redstone/redstone_server.setupConsoleLog","comment":"<p>Setup a simple log handler, that output messages to console.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":false,"default":true,"type":[{"outer":"logging.Level","inner":[]}],"value":"ConstructedConstant(Level(\"name\"=Instance of 'StringConstant',\"value\"=Instance of 'IntConstant'))","annotations":[]}},"annotations":[]},"dispatch":{"name":"dispatch","qualifiedName":"redstone/redstone_server.dispatch","comment":"<p>Dispatch a request.</p>\n<p>This method is intended to be used in unit tests, where you\ncan create new requests with MockRequest</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpResponse","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.UnparsedRequest","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"tearDown":{"name":"tearDown","qualifiedName":"redstone/redstone_server.tearDown","comment":"<p>Remove all modules, routes, interceptors and error handlers.</p>\n<p>This method is intended to be used in unit tests.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"setUp":{"name":"setUp","qualifiedName":"redstone/redstone_server.setUp","comment":"<p>Scan and initialize routes, interceptors and error handlers</p>\n<p>If <a>redstone/redstone_server.setUp.libraries</a> is provided, then the scan process will be limited\nto these libraries. This method is intended to be used in unit tests.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"libraries":{"name":"libraries","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Symbol","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"start":{"name":"start","qualifiedName":"redstone/redstone_server.start","comment":"<p>Start the server.</p>\n<p>The <a>redstone/redstone_server.start.address</a> can be a <a>dart-core.String</a> or an <a>redstone/dart-io.InternetAddress</a>. The <a>redstone/redstone_server.start.staticDir</a> is an\nabsolute or relative path to static files, which defaults to the 'web' directory\nof the project or build. If no static files will be handled by this server, the <a>redstone/redstone_server.start.staticDir</a>\ncan be setted to null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpServer","inner":[]}]}],"parameters":{"address":{"name":"address","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"StringConstant(\"0.0.0.0\")","annotations":[]},"port":{"name":"port","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"8080","annotations":[]},"staticDir":{"name":"staticDir","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"../web\")","annotations":[]},"indexFiles":{"name":"indexFiles","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"ListConstant([Instance of 'StringConstant'])","annotations":[]},"followLinks":{"name":"followLinks","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"jailRoot":{"name":"jailRoot","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"addModule":{"name":"addModule","qualifiedName":"redstone/redstone_server.addModule","comment":"<p>Register a module for dependency injection.</p>\n<p>All modules must be registered before invoking the <a>redstone/redstone_server.start</a> or\n<a>redstone/redstone_server.setUp</a> methods.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"module":{"name":"module","optional":false,"named":false,"default":false,"type":[{"outer":"di.Module","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"authenticateBasic":{"name":"authenticateBasic","qualifiedName":"redstone/redstone_server.authenticateBasic","comment":"<p>Http Basic access authentication</p>\n<p>Returns true if the current request contains the authorization header for <a>redstone/redstone_server.authenticateBasic.username</a> and <a>redstone/redstone_server.authenticateBasic.password</a>. \nIf authentication fails and <a>redstone/redstone_server.authenticateBasic.abortOnFail</a> is true, then <a>redstone/redstone_server.abort</a> will be \ncalled with the 401 status code. If authentication fails and <a>redstone/redstone_server.authenticateBasic.realm</a> is provided, \na 'www-authenticate' header will be added to response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"username":{"name":"username","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"password":{"name":"password","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"realm":{"name":"realm","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"abortOnFail":{"name":"abortOnFail","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"parseAuthorizationHeader":{"name":"parseAuthorizationHeader","qualifiedName":"redstone/redstone_server.parseAuthorizationHeader","comment":"<p>Parse authorization header from request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Credentials","inner":[]}],"parameters":{},"annotations":[]},"redirect":{"name":"redirect","qualifiedName":"redstone/redstone_server.redirect","comment":"<p>Redirect the user to <a>redstone/redstone_server.redirect.url</a>.</p>\n<p><a>redstone/redstone_server.redirect.url</a> can be absolute, or relative to the url of the current request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"abort":{"name":"abort","qualifiedName":"redstone/redstone_server.abort","comment":"<p>Abort the current request.</p>\n<p>If there is a ErrorHandler registered to <a>redstone/redstone_server.abort.statusCode</a>, it\nwill be invoked. Otherwise, the default ErrorHandler will be invoked.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"statusCode":{"name":"statusCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Group","qualifiedName":"redstone/redstone_server.Group","preview":"<p>An annotation to define groups.</p>"},{"name":"ErrorHandler","qualifiedName":"redstone/redstone_server.ErrorHandler","preview":"<p>An annotation to define error handlers.</p>"},{"name":"Interceptor","qualifiedName":"redstone/redstone_server.Interceptor","preview":"<p>An annotation to define interceptors.</p>"},{"name":"Inject","qualifiedName":"redstone/redstone_server.Inject","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Attr","qualifiedName":"redstone/redstone_server.Attr","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"QueryParam","qualifiedName":"redstone/redstone_server.QueryParam","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Body","qualifiedName":"redstone/redstone_server.Body","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Route","qualifiedName":"redstone/redstone_server.Route","preview":"<p>An annotation to define targets.</p>"},{"name":"Credentials","qualifiedName":"redstone/redstone_server.Credentials","preview":"<p>User credentials from request</p>"},{"name":"Chain","qualifiedName":"redstone/redstone_server.Chain","preview":"<p>The chain of the given request.</p>"},{"name":"UnparsedRequest","qualifiedName":"redstone/redstone_server.UnparsedRequest","preview":"<p>A request whose body was not fully read yet</p>"},{"name":"Request","qualifiedName":"redstone/redstone_server.Request","preview":"<p>The request's information and content.</p>"}],"typedef":{},"error":[{"name":"ChainException","qualifiedName":"redstone/redstone_server.ChainException"},{"name":"RequestException","qualifiedName":"redstone/redstone_server.RequestException"},{"name":"SetupException","qualifiedName":"redstone/redstone_server.SetupException"}]},"packageName":"redstone","packageIntro":"<h1>Redstone.dart</h1>\n<p><a href=\"https://drone.io/github.com/luizmineo/redstone.dart/latest\">!<a href=\"https://drone.io/github.com/luizmineo/redstone.dart/status.png\">Build Status</a></a></p>\n<p>Redstone.dart is a server-side, metadata driven microframework for <a href=\"https://www.dartlang.org/\">Dart</a>. </p>\n<h4>How does it work?</h4>\n<p>Redstone.dart allows you to easily publish your functions and classes through a web interface, by just adding some annotations to them. </p>\n<pre class=\"dart\"><code>\nimport 'package:redstone/server.dart' as app;\n\n@app.Route(\"/\")\nhelloWorld() =&gt; \"Hello, World!\";\n\nmain() {\n  app.setupConsoleLog();\n  app.start();\n}\n</code></pre>\n<h4>Want to know more?</h4>\n<p>Check out our <a href=\"https://github.com/luizmineo/redstone.dart/wiki\">wiki</a>! :)</p>"}