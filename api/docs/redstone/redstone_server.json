{"name":"redstone_server","qualifiedName":"redstone/redstone_server","comment":"","variables":{"BINARY":{"name":"BINARY","qualifiedName":"redstone/redstone_server.BINARY","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"DELETE":{"name":"DELETE","qualifiedName":"redstone/redstone_server.DELETE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"ERROR_HANDLER":{"name":"ERROR_HANDLER","qualifiedName":"redstone/redstone_server.ERROR_HANDLER","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"FORM":{"name":"FORM","qualifiedName":"redstone/redstone_server.FORM","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"GET":{"name":"GET","qualifiedName":"redstone/redstone_server.GET","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"INTERCEPTOR":{"name":"INTERCEPTOR","qualifiedName":"redstone/redstone_server.INTERCEPTOR","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"JSON":{"name":"JSON","qualifiedName":"redstone/redstone_server.JSON","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"POST":{"name":"POST","qualifiedName":"redstone/redstone_server.POST","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"PUT":{"name":"PUT","qualifiedName":"redstone/redstone_server.PUT","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"ROUTE":{"name":"ROUTE","qualifiedName":"redstone/redstone_server.ROUTE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"TEXT":{"name":"TEXT","qualifiedName":"redstone/redstone_server.TEXT","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"functions":{"setters":{"response=":{"name":"response=","qualifiedName":"redstone/redstone_server.response=","comment":"<p>The Response object, used for sending back the response to the client.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"shelf-response.Response","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"chain":{"name":"chain","qualifiedName":"redstone/redstone_server.chain","comment":"<p>The request's chain.</p>\n<p>Since each request run in its own <a>redstone/dart-async.Zone</a>, it's completely safe\nto access this object at any time, even in async callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Chain","inner":[]}],"parameters":{},"annotations":[]},"request":{"name":"request","qualifiedName":"redstone/redstone_server.request","comment":"<p>The request's information and content.</p>\n<p>Since each request run in it's own <a>redstone/dart-async.Zone</a>, it's completely safe\nto access this object at any time, even in async callbacks.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Request","inner":[]}],"parameters":{},"annotations":[]},"response":{"name":"response","qualifiedName":"redstone/redstone_server.response","comment":"<p>The Response object, used for sending back the response to the client.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf-response.Response","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"abort":{"name":"abort","qualifiedName":"redstone/redstone_server.abort","comment":"<p>Abort the current request.</p>\n<p>If there is an ErrorHandler registered to <a>redstone/redstone_server.abort.statusCode</a>, it\nwill be invoked. Otherwise, the default ErrorHandler will be invoked.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"statusCode":{"name":"statusCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addModule":{"name":"addModule","qualifiedName":"redstone/redstone_server.addModule","comment":"<p>Register a module for dependency injection.</p>\n<p>All modules must be registered before invoking the <a>redstone/redstone_server.start</a> or\n<a>redstone/redstone_server.setUp</a> methods.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"module":{"name":"module","optional":false,"named":false,"default":false,"type":[{"outer":"di.Module","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addPlugin":{"name":"addPlugin","qualifiedName":"redstone/redstone_server.addPlugin","comment":"<p>Register a plugin.</p>\n<p>All plugins must be registered before invoking the <a>redstone/redstone_server.start</a> or\n<a>redstone/redstone_server.setUp</a> methods.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"plugin":{"name":"plugin","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.RedstonePlugin","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addShelfMiddleware":{"name":"addShelfMiddleware","qualifiedName":"redstone/redstone_server.addShelfMiddleware","comment":"<p>Register a Shelf Middleware.</p>\n<p>Middlewares are invoked before any interceptor or route.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"middleware":{"name":"middleware","optional":false,"named":false,"default":false,"type":[{"outer":"shelf-middleware.Middleware","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"authenticateBasic":{"name":"authenticateBasic","qualifiedName":"redstone/redstone_server.authenticateBasic","comment":"<p>Http Basic access authentication</p>\n<p>Returns true if the current request contains the authorization header for <a>redstone/redstone_server.authenticateBasic.username</a> and <a>redstone/redstone_server.authenticateBasic.password</a>. \nIf authentication fails and <a>redstone/redstone_server.authenticateBasic.realm</a> is provided, then a new response with 401 status code and\na 'www-authenticate' header will be created.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"username":{"name":"username","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"password":{"name":"password","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"realm":{"name":"realm","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"dispatch":{"name":"dispatch","qualifiedName":"redstone/redstone_server.dispatch","comment":"<p>Dispatch a request.</p>\n<p>This method is intended to be used in unit tests, where you\ncan create new requests with MockRequest</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpResponse","inner":[]}]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.RequestHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"parseAuthorizationHeader":{"name":"parseAuthorizationHeader","qualifiedName":"redstone/redstone_server.parseAuthorizationHeader","comment":"<p>Parse authorization header from request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"redstone/redstone_server.Credentials","inner":[]}],"parameters":{},"annotations":[]},"redirect":{"name":"redirect","qualifiedName":"redstone/redstone_server.redirect","comment":"<p>Redirect the user to <a>redstone/redstone_server.redirect.url</a>.</p>\n<p><a>redstone/redstone_server.redirect.url</a> can be absolute, or relative to the url of the current request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"serveRequests":{"name":"serveRequests","qualifiedName":"redstone/redstone_server.serveRequests","comment":"<p>Serve a <a>redstone/redstone_server.Stream</a> of <a>redstone/dart-io.HttpRequest</a>s.</p>\n<p><a>redstone/dart-io.HttpServer</a> implements Stream&lt;HttpRequest>, so it can be passed directly\nto <a>redstone/redstone_server.serveRequests</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"requests":{"name":"requests","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"setShelfHandler":{"name":"setShelfHandler","qualifiedName":"redstone/redstone_server.setShelfHandler","comment":"<p>Register a Shelf Handler.</p>\n<p>The <a>redstone/redstone_server.setShelfHandler.handler</a> will be invoked when all interceptors are\ncompleted, and no route is found for the requested URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf-typedef.Handler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setUp":{"name":"setUp","qualifiedName":"redstone/redstone_server.setUp","comment":"<p>Scan and initialize routes, interceptors and error handlers</p>\n<p>If <a>redstone/redstone_server.setUp.libraries</a> is provided, then the scan process will be limited\nto these libraries. This method is intended to be used in unit tests.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"libraries":{"name":"libraries","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Symbol","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"setupConsoleLog":{"name":"setupConsoleLog","qualifiedName":"redstone/redstone_server.setupConsoleLog","comment":"<p>Setup a simple log handler, that output messages to console.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"level":{"name":"level","optional":true,"named":false,"default":true,"type":[{"outer":"logging.Level","inner":[]}],"value":"ConstructedConstant(Level(\"name\"=Instance of 'StringConstant',\"value\"=Instance of 'IntConstant'))","annotations":[]}},"annotations":[]},"start":{"name":"start","qualifiedName":"redstone/redstone_server.start","comment":"<p>Start the server.</p>\n<p>The <a>redstone/redstone_server.start.address</a> can be a <a>dart-core.String</a> or an <a>redstone/dart-io.InternetAddress</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpServer","inner":[]}]}],"parameters":{"address":{"name":"address","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"\"0.0.0.0\"","annotations":[]},"port":{"name":"port","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"8080","annotations":[]}},"annotations":[]},"tearDown":{"name":"tearDown","qualifiedName":"redstone/redstone_server.tearDown","comment":"<p>Remove all modules, plugins, routes, interceptors and error handlers.</p>\n<p>This method is intended to be used in unit tests.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"classes":{"class":[{"name":"Attr","qualifiedName":"redstone/redstone_server.Attr","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Body","qualifiedName":"redstone/redstone_server.Body","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Chain","qualifiedName":"redstone/redstone_server.Chain","preview":"<p>The chain of the given request.</p>"},{"name":"Credentials","qualifiedName":"redstone/redstone_server.Credentials","preview":"<p>User credentials from request</p>"},{"name":"DefaultRoute","qualifiedName":"redstone/redstone_server.DefaultRoute","preview":"<p>An annotation to define a target which must be bound \nto the URL of its group.</p>"},{"name":"ErrorHandler","qualifiedName":"redstone/redstone_server.ErrorHandler","preview":"<p>An annotation to define error handlers.</p>"},{"name":"Group","qualifiedName":"redstone/redstone_server.Group","preview":"<p>An annotation to define groups.</p>"},{"name":"HttpBody","qualifiedName":"redstone/redstone_server.HttpBody","preview":"<p>The body of a HTTP request.</p>"},{"name":"HttpBodyFileUpload","qualifiedName":"redstone/redstone_server.HttpBodyFileUpload","preview":"<p>ported from the http<em>server package\nhttp://pub.dartlang.org/packages/http</em>server</p>"},{"name":"HttpRequestParser","qualifiedName":"redstone/redstone_server.HttpRequestParser","preview":"<p>HttpRequest parser</p>"},{"name":"Ignore","qualifiedName":"redstone/redstone_server.Ignore","preview":"<p>Use this annotation to import a library without installing\nits handlers</p>"},{"name":"Inject","qualifiedName":"redstone/redstone_server.Inject","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Install","qualifiedName":"redstone/redstone_server.Install","preview":"<p>An annotation to include handlers from other libraries</p>"},{"name":"Interceptor","qualifiedName":"redstone/redstone_server.Interceptor","preview":"<p>An annotation to define interceptors.</p>"},{"name":"Manager","qualifiedName":"redstone/redstone_server.Manager","preview":"<p>Allows to programmatically create routes, interceptors, error handlers\nand parameter providers.</p>"},{"name":"QueryParam","qualifiedName":"redstone/redstone_server.QueryParam","preview":"<p>An annotation to define a target parameter.</p>"},{"name":"Request","qualifiedName":"redstone/redstone_server.Request","preview":"<p>The request's information and content.</p>"},{"name":"RequestHandler","qualifiedName":"redstone/redstone_server.RequestHandler","preview":"<p>Request handler</p>"},{"name":"Route","qualifiedName":"redstone/redstone_server.Route","preview":"<p>An annotation to define targets.</p>"},{"name":"ShelfTransformer","qualifiedName":"redstone/redstone_server.ShelfTransformer","preview":"<p>Utility methods to handle shelf objects</p>"},{"name":"UnparsedRequest","qualifiedName":"redstone/redstone_server.UnparsedRequest","preview":"<p>A request whose body was not fully read yet</p>"},{"name":"Writer","qualifiedName":"redstone/redstone_server.Writer","preview":"<p>A writer which can serialize a response to the client</p>"}],"typedef":{"Handler":{"name":"Handler","qualifiedName":"redstone/redstone_server.Handler","comment":"<p>An interceptor or error handler, programmatically created by a plugin.</p>","return":"dynamic","parameters":{"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>An interceptor or error handler, programmatically created by a plugin.</p>"},"ParamProvider":{"name":"ParamProvider","qualifiedName":"redstone/redstone_server.ParamProvider","comment":"<p>A parameter provider is a function that can create parameters\nfor routes, interceptors and error handlers.</p>\n<p>It can be used, for example, to automatically validate\nand parse the request's body and arguments.</p>","return":"dart-core.Object","parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"paramType":{"name":"paramType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"handlerName":{"name":"handlerName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"paramName":{"name":"paramName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Request","inner":[]}],"value":null,"annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A parameter provider is a function that can create parameters\nfor routes, interceptors and error handlers.</p>"},"RedstonePlugin":{"name":"RedstonePlugin","qualifiedName":"redstone/redstone_server.RedstonePlugin","comment":"<p>A plugin is a function which can dynamically add new features\nto an application.</p>","return":"void","parameters":{"manager":{"name":"manager","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Manager","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A plugin is a function which can dynamically add new features\nto an application.</p>"},"ResponseProcessor":{"name":"ResponseProcessor","qualifiedName":"redstone/redstone_server.ResponseProcessor","comment":"<p>A response processor is a function, that can transform values\nreturned by routes.</p>","return":"dart-core.Object","parameters":{"metadata":{"name":"metadata","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"handlerName":{"name":"handlerName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"response":{"name":"response","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A response processor is a function, that can transform values\nreturned by routes.</p>"},"RouteHandler":{"name":"RouteHandler","qualifiedName":"redstone/redstone_server.RouteHandler","comment":"<p>A route programmatically created by a plugin.</p>","return":"dynamic","parameters":{"pathSegments":{"name":"pathSegments","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Request","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A route programmatically created by a plugin.</p>"}},"error":[{"name":"ChainException","qualifiedName":"redstone/redstone_server.ChainException"},{"name":"RequestException","qualifiedName":"redstone/redstone_server.RequestException"},{"name":"SetupException","qualifiedName":"redstone/redstone_server.SetupException"}]},"packageName":"redstone","packageIntro":"<h1>Redstone.dart</h1>\n<p><a href=\"https://drone.io/github.com/luizmineo/redstone.dart/latest\"><a href=\"https://drone.io/github.com/luizmineo/redstone.dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/luizmineo/redstone.dart/status.png\"></img></a></a></p>\n<p>Redstone.dart is a server-side, metadata driven microframework for <a href=\"https://www.dartlang.org/\">Dart</a>. </p>\n<h4>How does it work?</h4>\n<p>Redstone.dart allows you to easily publish your functions and classes through a web interface, by just adding some annotations to them. </p>\n<pre class=\"dart\"><code>\nimport 'package:redstone/server.dart' as app;\n\n@app.Route(\"/\")\nhelloWorld() =&gt; \"Hello, World!\";\n\nmain() {\n  app.setupConsoleLog();\n  app.start();\n}\n</code></pre>\n<h4>Want to know more?</h4>\n<p>Check out our <a href=\"https://github.com/luizmineo/redstone.dart/wiki\">wiki</a>! :)</p>"}