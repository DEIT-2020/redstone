{"name":"MockHttpResponse","qualifiedName":"redstone/redstone_mocks.MockHttpResponse","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["redstone/redstone_mocks.HttpResponse"],"subclass":[],"variables":{"headers":{"name":"headers","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.headers","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"redstone/redstone_mocks.HttpHeaders","inner":[]}],"annotations":[]},"statusCode":{"name":"statusCode","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.statusCode","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"encoding":{"name":"encoding","qualifiedName":"redstone/redstone_mocks.IOSink.encoding","comment":"<p>The <a>redstone/dart-convert.Encoding</a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"annotations":[]},"contentLength":{"name":"contentLength","qualifiedName":"redstone/redstone_mocks.HttpResponse.contentLength","comment":"<p>Gets and sets the content length of the response. If the size of\nthe response is not known in advance set the content length to\n-1 - which is also the default if not set.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"statusCode":{"name":"statusCode","qualifiedName":"redstone/redstone_mocks.HttpResponse.statusCode","comment":"<p>Gets and sets the status code. Any integer value is accepted. For\nthe official HTTP status codes use the fields from\n<a>redstone/dart-io.HttpStatus</a>. If no status code is explicitly set the default\nvalue <a>redstone/dart-io.HttpStatus.OK</a> is used.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"reasonPhrase":{"name":"reasonPhrase","qualifiedName":"redstone/redstone_mocks.HttpResponse.reasonPhrase","comment":"<p>Gets and sets the reason phrase. If no reason phrase is explicitly\nset a default reason phrase is provided.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"persistentConnection":{"name":"persistentConnection","qualifiedName":"redstone/redstone_mocks.HttpResponse.persistentConnection","comment":"<p>Gets and sets the persistent connection state. The initial value\nof this property is the persistent connection state from the\nrequest.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"deadline":{"name":"deadline","qualifiedName":"redstone/redstone_mocks.HttpResponse.deadline","comment":"<p>Set and get the <a>redstone/redstone_mocks.HttpResponse.deadline</a> for the response. The deadline is timed from the\ntime it's set. Setting a new deadline will override any previous deadline.\nWhen a deadline is exceeded, the response will be closed and any further\ndata ignored.</p>\n<p>To disable a deadline, set the <a>redstone/redstone_mocks.HttpResponse.deadline</a> to <code>null</code>.</p>\n<p>The <a>redstone/redstone_mocks.HttpResponse.deadline</a> is <code>null</code> by default.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"annotations":[]}},"methods":{"setters":{"reasonPhrase=":{"name":"reasonPhrase=","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.reasonPhrase=","comment":"","commentFrom":"redstone_mocks.MockHttpResponse.reasonPhrase=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"reasonPhrase":{"name":"reasonPhrase","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.reasonPhrase","comment":"","commentFrom":"redstone_mocks.MockHttpResponse.reasonPhrase","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"done":{"name":"done","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.done","comment":"<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a>redstone/redstone_mocks.MockHttpResponse.close</a>.</p>","commentFrom":"redstone_mocks.IOSink.done","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"mockContent":{"name":"mockContent","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.mockContent","comment":"","commentFrom":"redstone_mocks.MockHttpResponse.mockContent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"mockDone":{"name":"mockDone","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.mockDone","comment":"","commentFrom":"redstone_mocks.MockHttpResponse.mockDone","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.MockHttpResponse-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"close":{"name":"close","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.close","comment":"<p>Close the target consumer.</p>","commentFrom":"redstone_mocks.IOSink.close","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"add":{"name":"add","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.add","comment":"<p>Adds <a>redstone/redstone_mocks.MockHttpResponse.add.data</a> to the target consumer, ignoring encoding.</p>\n<p>The encoding does not apply to this method, and the <code>data</code> list is passed\ndirectly to the target consumer as a stream event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>redstone/redstone_mocks.MockHttpResponse.addStream</a>.</p>\n<p>This operation is non-blocking. See flush or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>\n<p>The data list should not be modified after it has been passed to <code>add</code>.</p>","commentFrom":"redstone_mocks.IOSink.add","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.addStream","comment":"<p>Adds all elements of the given <a>redstone/redstone_mocks.MockHttpResponse.addStream.stream</a> to <code>this</code>.</p>","commentFrom":"redstone_mocks.IOSink.addStream","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_mocks.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":"null","annotations":[]}},"annotations":[]},"addError":{"name":"addError","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.addError","comment":"<p>Passes the error to the target consumer as an error event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>redstone/redstone_mocks.MockHttpResponse.addStream</a>.</p>\n<p>This operation is non-blocking. See flush or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"redstone_mocks.IOSink.addError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"redirect":{"name":"redirect","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.redirect","comment":"<p>Respond with a redirect to <a>redstone/redstone_mocks.MockHttpResponse.redirect.location</a>.</p>\n<p>The URI in <a>redstone/redstone_mocks.MockHttpResponse.redirect.location</a> should be absolute, but there are no checks\nto enforce that.</p>\n<p>By default the HTTP status code <code>HttpStatus.MOVED_TEMPORARILY</code>\n(<code>302</code>) is used for the redirect, but an alternative one can be\nspecified using the <a>redstone/redstone_mocks.MockHttpResponse.redirect.status</a> argument.</p>\n<p>This method will also call <code>close</code>, and the returned future is\nthe furure returned by <code>close</code>.</p>","commentFrom":"redstone_mocks.HttpResponse.redirect","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":"null","annotations":[]},"status":{"name":"status","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"302","annotations":[]}},"annotations":[]},"write":{"name":"write","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.write","comment":"<p>Converts <a>redstone/redstone_mocks.MockHttpResponse.write.obj</a> to a String by invoking <a>redstone/redstone_mocks.MockHttpResponse.toString</a> and\n<a>redstone/redstone_mocks.MockHttpResponse.add</a>s the encoding of the result to the target consumer.</p>\n<p>This operation is non-blocking. See flush or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"redstone_mocks.IOSink.write","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.noSuchMethod","comment":"<p><a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>redstone/redstone_mocks.MockHttpResponse.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"done":{"name":"done","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.done","comment":"<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a>redstone/redstone_mocks.MockHttpResponse.close</a>.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.done","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"headers":{"name":"headers","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.headers","comment":"<p>Returns the response headers.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpResponse.headers","static":false,"abstract":true,"constant":false,"return":[{"outer":"redstone/redstone_mocks.HttpHeaders","inner":[]}],"parameters":{},"annotations":[]},"cookies":{"name":"cookies","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.cookies","comment":"<p>Cookies to set in the client (in the 'set-cookie' header).</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpResponse.cookies","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-io.Cookie","inner":[]}]}],"parameters":{},"annotations":[]},"connectionInfo":{"name":"connectionInfo","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.connectionInfo","comment":"<p>Gets information about the client connection. Returns <code>null</code> if the\nsocket is not available.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpResponse.connectionInfo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpConnectionInfo","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>redstone/redstone_mocks.MockHttpResponse.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>redstone/redstone_mocks.MockHttpResponse.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.noSuchMethod","comment":"<p><a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_mocks.MockHttpResponse.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"write":{"name":"write","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.write","comment":"<p>Converts <a>redstone/redstone_mocks.MockHttpResponse.write.obj</a> to a String by invoking <a>redstone/redstone_mocks.MockHttpResponse.toString</a> and\n<a>redstone/redstone_mocks.MockHttpResponse.add</a>s the encoding of the result to the target consumer.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.write","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"writeAll":{"name":"writeAll","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.writeAll","comment":"<p>Iterates over the given <a>redstone/redstone_mocks.MockHttpResponse.writeAll.objects</a> and <a>redstone/redstone_mocks.MockHttpResponse.write</a>s them in sequence.</p>\n<p>If <a>redstone/redstone_mocks.MockHttpResponse.writeAll.separator</a> is provided, a <code>write</code> with the <code>separator</code> is performed\nbetween any two elements of <code>objects</code>.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.writeAll","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"objects":{"name":"objects","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[]}],"value":"null","annotations":[]},"separator":{"name":"separator","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]},"writeln":{"name":"writeln","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.writeln","comment":"<p>Converts <a>redstone/redstone_mocks.MockHttpResponse.writeln.obj</a> to a String by invoking <a>redstone/redstone_mocks.MockHttpResponse.toString</a> and\nwrites the result to <code>this</code>, followed by a newline.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.writeln","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"obj":{"name":"obj","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]},"writeCharCode":{"name":"writeCharCode","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.writeCharCode","comment":"<p>Writes the <a>redstone/redstone_mocks.MockHttpResponse.writeCharCode.charCode</a> to <code>this</code>.</p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))</code>.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.writeCharCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"charCode":{"name":"charCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"add":{"name":"add","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.add","comment":"<p>Adds <a>redstone/redstone_mocks.MockHttpResponse.add.data</a> to the target consumer, ignoring <a>redstone/dart-io.IOSink.encoding</a>.</p>\n<p>The <a>redstone/dart-io.IOSink.encoding</a> does not apply to this method, and the <code>data</code> list is passed\ndirectly to the target consumer as a stream event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>redstone/redstone_mocks.MockHttpResponse.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>\n<p>The data list should not be modified after it has been passed to <code>add</code>.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.close","comment":"<p>Close the target consumer.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"addError":{"name":"addError","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.addError","comment":"<p>Passes the error to the target consumer as an error event.</p>\n<p>This function must not be called when a stream is currently being added\nusing <a>redstone/redstone_mocks.MockHttpResponse.addStream</a>.</p>\n<p>This operation is non-blocking. See <a>redstone/redstone_mocks.MockHttpResponse.flush</a> or <a>redstone/redstone_mocks.MockHttpResponse.done</a> for how to get any\nerrors generated by this call.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.addError","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.addStream","comment":"<p>Adds all elements of the given <a>redstone/redstone_mocks.MockHttpResponse.addStream.stream</a> to <code>this</code>.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.addStream","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_mocks.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":"null","annotations":[]}},"annotations":[]},"flush":{"name":"flush","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.flush","comment":"<p>Returns a <a>redstone/dart-async.Future</a> that completes once all buffered data is accepted by the\nto underlying <a>redstone/redstone_mocks.StreamConsumer</a>.</p>\n<p>It's an error to call this method, while an <a>redstone/redstone_mocks.MockHttpResponse.addStream</a> is incomplete.</p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.IOSink.flush","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"redirect":{"name":"redirect","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.redirect","comment":"<p>Respond with a redirect to <a>redstone/redstone_mocks.MockHttpResponse.redirect.location</a>.</p>\n<p>The URI in <a>redstone/redstone_mocks.MockHttpResponse.redirect.location</a> should be absolute, but there are no checks\nto enforce that.</p>\n<p>By default the HTTP status code <code>HttpStatus.MOVED_TEMPORARILY</code>\n(<code>302</code>) is used for the redirect, but an alternative one can be\nspecified using the <a>redstone/redstone_mocks.MockHttpResponse.redirect.status</a> argument.</p>\n<p>This method will also call <code>close</code>, and the returned future is\nthe furure returned by <code>close</code>.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpResponse.redirect","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Uri","inner":[]}],"value":"null","annotations":[]},"status":{"name":"status","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"302","annotations":[]}},"annotations":[]},"detachSocket":{"name":"detachSocket","qualifiedName":"redstone/redstone_mocks.MockHttpResponse.detachSocket","comment":"<p>Detaches the underlying socket from the HTTP server. When the\nsocket is detached the HTTP server will no longer perform any\noperations on it.</p>\n<p>This is normally used when a HTTP upgrade request is received\nand the communication should continue with a different protocol.</p>","commentFrom":"","inheritedFrom":"redstone_mocks.HttpResponse.detachSocket","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.Socket","inner":[]}]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}