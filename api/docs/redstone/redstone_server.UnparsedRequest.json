{"name":"UnparsedRequest","qualifiedName":"redstone/redstone_server.UnparsedRequest","comment":"<p>A request whose body was not fully read yet</p>","isAbstract":true,"superclass":"redstone/redstone_server.Request","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"parseBody":{"name":"parseBody","qualifiedName":"redstone/redstone_server.UnparsedRequest.parseBody","comment":"","commentFrom":"redstone_mocks.UnparsedRequest.parseBody","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"redstone/redstone_server.UnparsedRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>redstone/redstone_server.UnparsedRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"redstone/redstone_server.UnparsedRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"method":{"name":"method","qualifiedName":"redstone/redstone_server.UnparsedRequest.method","comment":"<p>The method, such as 'GET' or 'POST', for the request (read-only).</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.method","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"queryParams":{"name":"queryParams","qualifiedName":"redstone/redstone_server.UnparsedRequest.queryParams","comment":"<p>The query parameters associated with the request</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.queryParams","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"bodyType":{"name":"bodyType","qualifiedName":"redstone/redstone_server.UnparsedRequest.bodyType","comment":"<p>The body type, such as 'JSON', 'TEXT' or 'FORM'</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.bodyType","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"isMultipart":{"name":"isMultipart","qualifiedName":"redstone/redstone_server.UnparsedRequest.isMultipart","comment":"<p>Indicate if this request is multipart</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.isMultipart","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"body":{"name":"body","qualifiedName":"redstone/redstone_server.UnparsedRequest.body","comment":"<p>The request body.</p>\n<p><a>redstone/redstone_server.UnparsedRequest.body</a> can be a <a>dart-core.Map</a>, <a>dart-core.List</a> or <a>dart-core.String</a>. See <a>redstone/http_server.HttpRequestBody</a>\nfor more information.</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.body","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"headers":{"name":"headers","qualifiedName":"redstone/redstone_server.UnparsedRequest.headers","comment":"<p>The headers of the request</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.headers","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpHeaders","inner":[]}],"parameters":{},"annotations":[]},"session":{"name":"session","qualifiedName":"redstone/redstone_server.UnparsedRequest.session","comment":"<p>The session for the given request (read-only).</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.session","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpSession","inner":[]}],"parameters":{},"annotations":[]},"attributes":{"name":"attributes","qualifiedName":"redstone/redstone_server.UnparsedRequest.attributes","comment":"<p>Map of request attributes.</p>\n<p>Attributes are objects that can be shared between\ninterceptors and routes</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.attributes","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[]}],"parameters":{},"annotations":[]},"response":{"name":"response","qualifiedName":"redstone/redstone_server.UnparsedRequest.response","comment":"<p>The <a>redstone/dart-io.HttpResponse</a> object, used for sending back the response to the client (read-only).</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.response","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpResponse","inner":[]}],"parameters":{},"annotations":[]},"httpRequest":{"name":"httpRequest","qualifiedName":"redstone/redstone_server.UnparsedRequest.httpRequest","comment":"<p>The <a>redstone/dart-io.HttpRequest</a> object of the given request (read-only).</p>","commentFrom":"","inheritedFrom":"redstone_server.Request.httpRequest","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-io.HttpRequest","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"redstone/redstone_server.UnparsedRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>redstone/redstone_server.UnparsedRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>redstone/redstone_server.UnparsedRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"redstone/redstone_server.UnparsedRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_server.UnparsedRequest.noSuchMethod","comment":"<p><a>redstone/redstone_server.UnparsedRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_server.UnparsedRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_server.UnparsedRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_server.UnparsedRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}