{"name":"Manager","qualifiedName":"redstone/redstone_server.Manager","comment":"<p>Allows to programmatically create routes, interceptors, error handlers\nand parameter providers.</p>\n<p>To access a <a>redstone/redstone_server.Manager</a> instance, you need to create and register a <a>redstone/redstone_server.RedstonePlugin</a>.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"addRoute":{"name":"addRoute","qualifiedName":"redstone/redstone_server.Manager.addRoute","comment":"<p>Create a new route.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"conf":{"name":"conf","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Route","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"route":{"name":"route","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.RouteHandler","inner":[]}],"value":"null","annotations":[]},"bodyType":{"name":"bodyType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addInterceptor":{"name":"addInterceptor","qualifiedName":"redstone/redstone_server.Manager.addInterceptor","comment":"<p>Create a new interceptor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"conf":{"name":"conf","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Interceptor","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"interceptor":{"name":"interceptor","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Handler","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addErrorHandler":{"name":"addErrorHandler","qualifiedName":"redstone/redstone_server.Manager.addErrorHandler","comment":"<p>Create a new error handler.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"conf":{"name":"conf","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.ErrorHandler","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"errorHandler":{"name":"errorHandler","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.Handler","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addParameterProvider":{"name":"addParameterProvider","qualifiedName":"redstone/redstone_server.Manager.addParameterProvider","comment":"<p>Create a new parameter provider.</p>\n<p><a>redstone/redstone_server.Manager.addParameterProvider.metadataType</a> is the annotation type that triggers this provider. \n<a>redstone/redstone_server.Manager.addParameterProvider.parameterProvider</a> is the function which will be invoked to create\nthe parameter's value. <a>redstone/redstone_server.Manager.addParameterProvider.handlerTypes</a> are the handler types that can use\nthis provider, and defaults to ROUTE.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"metadataType":{"name":"metadataType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":"null","annotations":[]},"parameterProvider":{"name":"parameterProvider","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.ParamProvider","inner":[]}],"value":"null","annotations":[]},"handlerTypes":{"name":"handlerTypes","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"ListConstant([Instance of 'StringConstant'])","annotations":[]}},"annotations":[]},"addResponseProcessor":{"name":"addResponseProcessor","qualifiedName":"redstone/redstone_server.Manager.addResponseProcessor","comment":"<p>Create a new response processor.</p>\n<p><a>redstone/redstone_server.Manager.addResponseProcessor.metadataType</a> is the annotation type that triggers this processor.\n<a>redstone/redstone_server.Manager.addResponseProcessor.processor</a> is the function which will be invoked to transform the returned\nvalue.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"metadataType":{"name":"metadataType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":"null","annotations":[]},"processor":{"name":"processor","optional":false,"named":false,"default":false,"type":[{"outer":"redstone/redstone_server.ResponseProcessor","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"redstone/redstone_server.Manager.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>redstone/redstone_server.Manager.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"redstone/redstone_server.Manager.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"redstone/redstone_server.Manager.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>redstone/redstone_server.Manager.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>redstone/redstone_server.Manager.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"redstone/redstone_server.Manager.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"redstone/redstone_server.Manager.noSuchMethod","comment":"<p><a>redstone/redstone_server.Manager.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>redstone/redstone_server.Manager.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>redstone/redstone_server.Manager.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>redstone/redstone_server.Manager.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}